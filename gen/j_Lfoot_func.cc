/*
 * Automatically Generated from Mathematica.
 * Tue 10 Jul 2018 22:07:10 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t56;
  double t62;
  double t71;
  double t85;
  double t72;
  double t86;
  double t125;
  double t132;
  double t149;
  double t84;
  double t89;
  double t114;
  double t154;
  double t156;
  double t168;
  double t175;
  double t208;
  double t224;
  double t228;
  double t251;
  double t244;
  double t245;
  double t249;
  double t236;
  double t121;
  double t153;
  double t176;
  double t187;
  double t189;
  double t192;
  double t194;
  double t201;
  double t240;
  double t253;
  double t254;
  double t257;
  double t259;
  double t261;
  double t263;
  double t264;
  double t265;
  double t270;
  double t275;
  double t281;
  double t324;
  double t325;
  double t326;
  double t329;
  double t336;
  double t341;
  double t353;
  double t284;
  double t285;
  double t328;
  double t345;
  double t347;
  double t348;
  double t349;
  double t352;
  double t354;
  double t355;
  double t360;
  double t362;
  double t367;
  double t368;
  double t369;
  double t371;
  double t375;
  double t377;
  double t291;
  double t400;
  double t401;
  double t402;
  double t403;
  double t404;
  double t407;
  double t409;
  double t398;
  double t411;
  double t412;
  double t416;
  double t425;
  double t426;
  double t439;
  double t440;
  double t441;
  double t443;
  double t445;
  double t447;
  double t450;
  double t444;
  double t452;
  double t454;
  double t457;
  double t458;
  double t459;
  double t431;
  double t397;
  double t432;
  double t433;
  double t438;
  double t381;
  double t382;
  double t387;
  double t463;
  double t464;
  double t380;
  double t388;
  double t390;
  double t415;
  double t427;
  double t429;
  double t456;
  double t460;
  double t461;
  double t462;
  double t466;
  double t467;
  double t468;
  double t470;
  double t473;
  double t505;
  double t506;
  double t507;
  double t477;
  double t479;
  double t483;
  double t489;
  double t496;
  double t498;
  double t499;
  double t500;
  double t501;
  double t508;
  double t514;
  double t515;
  double t516;
  double t517;
  double t518;
  double t522;
  double t532;
  double t533;
  double t537;
  double t540;
  double t541;
  double t544;
  double t546;
  double t548;
  double t484;
  double t502;
  double t504;
  double t525;
  double t526;
  double t527;
  double t572;
  double t564;
  double t566;
  double t567;
  double t568;
  double t578;
  double t579;
  double t581;
  double t583;
  double t584;
  double t585;
  double t588;
  double t590;
  double t591;
  double t571;
  double t592;
  double t593;
  double t595;
  double t596;
  double t597;
  double t292;
  double t294;
  double t299;
  double t289;
  double t304;
  double t308;
  double t594;
  double t598;
  double t599;
  double t600;
  double t602;
  double t603;
  double t606;
  double t607;
  double t608;
  double t621;
  double t623;
  double t624;
  double t625;
  double t626;
  double t627;
  double t628;
  double t631;
  double t632;
  double t667;
  double t655;
  double t657;
  double t660;
  double t662;
  double t665;
  double t666;
  double t668;
  double t669;
  double t671;
  double t672;
  double t673;
  double t675;
  double t677;
  double t681;
  double t682;
  double t683;
  double t736;
  double t713;
  double t716;
  double t720;
  double t721;
  double t732;
  double t740;
  double t746;
  double t751;
  double t753;
  double t756;
  double t758;
  double t760;
  double t766;
  double t767;
  double t769;
  double t771;
  double t813;
  double t799;
  double t802;
  double t806;
  double t811;
  double t812;
  double t816;
  double t817;
  double t818;
  double t823;
  double t825;
  double t827;
  double t830;
  double t833;
  double t834;
  double t835;
  double t836;
  double t841;
  double t842;
  double t843;
  double t840;
  double t846;
  double t847;
  double t858;
  double t865;
  double t868;
  double t870;
  double t871;
  double t872;
  double t876;
  double t877;
  double t879;
  double t430;
  double t474;
  double t475;
  double t550;
  double t551;
  double t554;
  double t883;
  double t887;
  double t888;
  double t869;
  double t880;
  double t881;
  double t555;
  double t536;
  double t778;
  double t779;
  double t781;
  double t777;
  double t782;
  double t786;
  double t619;
  double t630;
  double t633;
  double t634;
  double t635;
  double t638;
  double t639;
  double t640;
  double t641;
  double t642;
  double t644;
  double t645;
  double t646;
  double t695;
  double t698;
  double t701;
  double t691;
  double t704;
  double t705;
  double t941;
  double t935;
  double t936;
  double t937;
  double t938;
  double t939;
  double t942;
  double t943;
  double t944;
  double t948;
  double t949;
  double t951;
  double t952;
  double t954;
  double t965;
  double t966;
  double t969;
  double t976;
  double t971;
  double t972;
  double t973;
  double t974;
  double t975;
  double t979;
  double t980;
  double t986;
  double t987;
  double t989;
  double t990;
  double t991;
  double t992;
  double t1010;
  double t1005;
  double t1006;
  double t1007;
  double t1008;
  double t1009;
  double t1011;
  double t1012;
  double t1013;
  double t1017;
  double t1018;
  double t1019;
  double t1020;
  double t1021;
  double t1025;
  double t1026;
  double t1027;
  double t1024;
  double t1028;
  double t1029;
  double t1033;
  double t1034;
  double t1035;
  double t1038;
  double t1041;
  double t1043;
  double t1044;
  double t1045;
  double t1047;
  double t1036;
  double t1049;
  double t1050;
  double t1054;
  double t1056;
  double t1057;
  double t957;
  double t958;
  double t960;
  double t956;
  double t961;
  double t962;
  double t929;
  double t930;
  double t931;
  double t996;
  double t997;
  double t998;
  double t995;
  double t999;
  double t1000;
  double t1098;
  double t1099;
  double t1100;
  double t1101;
  double t1091;
  double t1092;
  double t1093;
  double t1094;
  double t1097;
  double t1102;
  double t1103;
  double t1104;
  double t1105;
  double t1106;
  double t1125;
  double t1126;
  double t1127;
  double t1128;
  double t1119;
  double t1120;
  double t1121;
  double t1122;
  double t1123;
  double t1129;
  double t1131;
  double t1132;
  double t1133;
  double t1134;
  double t1153;
  double t1155;
  double t1156;
  double t1157;
  double t1147;
  double t1148;
  double t1149;
  double t1150;
  double t1151;
  double t1160;
  double t1162;
  double t1163;
  double t1164;
  double t1165;
  double t1169;
  double t1170;
  double t1173;
  double t1168;
  double t1174;
  double t1175;
  double t1179;
  double t1180;
  double t1183;
  double t1184;
  double t1185;
  double t1186;
  double t1187;
  double t1188;
  double t1181;
  double t1189;
  double t1190;
  double t1192;
  double t1193;
  double t1194;
  double t1109;
  double t1111;
  double t1112;
  double t1108;
  double t1113;
  double t1114;
  double t1137;
  double t1139;
  double t1140;
  double t1136;
  double t1141;
  double t1142;
  double t1228;
  double t1229;
  double t1230;
  double t1239;
  double t1241;
  double t1243;
  double t1253;
  double t1254;
  double t1255;
  double t1257;
  double t1258;
  double t1259;
  double t1265;
  double t1266;
  double t1268;
  double t1270;
  double t1271;
  double t1272;
  double t1279;
  double t1280;
  double t1281;
  double t1262;
  double t1275;
  double t1277;
  double t1245;
  double t1248;
  double t1250;
  double t1232;
  double t1233;
  double t1234;
  double t1356;
  double t1357;
  double t1358;
  double t1359;
  double t1362;
  double t1363;
  double t1366;
  double t1368;
  double t1369;
  double t1370;
  double t1371;
  double t1372;
  double t1346;
  double t1347;
  double t1349;
  double t1350;
  double t1351;
  double t1352;
  double t1333;
  double t1336;
  double t1337;
  double t1338;
  double t1340;
  double t1341;
  double t1417;
  double t1418;
  double t1420;
  double t1421;
  double t1422;
  double t1424;
  double t1427;
  double t1428;
  double t1414;
  double t1415;
  double t1410;
  double t1411;
  double t1489;
  double t1491;
  t56 = Cos(var1[3]);
  t62 = Cos(var1[4]);
  t71 = Cos(var1[5]);
  t85 = Sin(var1[4]);
  t72 = Sin(var1[3]);
  t86 = Sin(var1[5]);
  t125 = Sin(var1[18]);
  t132 = -0.707107*t125;
  t149 = 0. + t132;
  t84 = -1.*t71*t72;
  t89 = -1.*t56*t85*t86;
  t114 = t84 + t89;
  t154 = Cos(var1[18]);
  t156 = t56*t71*t85;
  t168 = -1.*t72*t86;
  t175 = t156 + t168;
  t208 = 0.707107*t154;
  t224 = 0. + t208;
  t228 = 0.707107*t224;
  t251 = -0.5000003094490001 + t228;
  t244 = 0.707107*t125;
  t245 = 0. + t244;
  t249 = t245*t175;
  t236 = 0.5000003094490001 + t228;
  t121 = Sin(var1[20]);
  t153 = -1.*t56*t62*t149;
  t176 = t154*t175;
  t187 = t149*t114;
  t189 = t153 + t176 + t187;
  t192 = t121*t189;
  t194 = Cos(var1[20]);
  t201 = Cos(var1[19]);
  t240 = -1.*t236*t56*t62;
  t253 = t251*t114;
  t254 = t240 + t249 + t253;
  t257 = t201*t254;
  t259 = Sin(var1[19]);
  t261 = -1.*t251*t56*t62;
  t263 = t236*t114;
  t264 = t261 + t249 + t263;
  t265 = -1.*t259*t264;
  t270 = t257 + t265;
  t275 = t194*t270;
  t281 = t192 + t275;
  t324 = t56*t71;
  t325 = -1.*t72*t85*t86;
  t326 = t324 + t325;
  t329 = t71*t72*t85;
  t336 = t56*t86;
  t341 = t329 + t336;
  t353 = t245*t341;
  t284 = Cos(var1[21]);
  t285 = 0. + t284;
  t328 = -1.*t62*t149*t72;
  t345 = t154*t341;
  t347 = t149*t326;
  t348 = t328 + t345 + t347;
  t349 = t121*t348;
  t352 = -1.*t236*t62*t72;
  t354 = t251*t326;
  t355 = t352 + t353 + t354;
  t360 = t201*t355;
  t362 = -1.*t251*t62*t72;
  t367 = t236*t326;
  t368 = t362 + t353 + t367;
  t369 = -1.*t259*t368;
  t371 = t360 + t369;
  t375 = t194*t371;
  t377 = t349 + t375;
  t291 = Sin(var1[21]);
  t400 = -1.*t56*t71*t85;
  t401 = t72*t86;
  t402 = t400 + t401;
  t403 = t245*t402;
  t404 = t71*t72;
  t407 = t56*t85*t86;
  t409 = t404 + t407;
  t398 = t236*t56*t62;
  t411 = t251*t409;
  t412 = 0. + t398 + t403 + t411;
  t416 = t251*t56*t62;
  t425 = t236*t409;
  t426 = 0. + t416 + t403 + t425;
  t439 = t56*t62*t149;
  t440 = t154*t402;
  t441 = t149*t409;
  t443 = t439 + t440 + t441;
  t445 = t201*t412;
  t447 = -1.*t259*t426;
  t450 = t445 + t447;
  t444 = t121*t443;
  t452 = t194*t450;
  t454 = t444 + t452;
  t457 = t194*t443;
  t458 = -1.*t121*t450;
  t459 = t457 + t458;
  t431 = Sin(var1[23]);
  t397 = Cos(var1[23]);
  t432 = Sin(var1[22]);
  t433 = -1.*t291;
  t438 = 0. + t433;
  t381 = t194*t348;
  t382 = -1.*t121*t371;
  t387 = t381 + t382;
  t463 = Cos(var1[22]);
  t464 = 0. + t463;
  t380 = t285*t377;
  t388 = t291*t387;
  t390 = t380 + t388;
  t415 = t259*t412;
  t427 = t201*t426;
  t429 = 0. + t415 + t427;
  t456 = t438*t454;
  t460 = t284*t459;
  t461 = t456 + t460;
  t462 = t432*t461;
  t466 = t285*t454;
  t467 = t291*t459;
  t468 = t466 + t467;
  t470 = t464*t468;
  t473 = t462 + t470;
  t505 = -1.*t431*t429;
  t506 = t397*t473;
  t507 = t505 + t506;
  t477 = t259*t355;
  t479 = t201*t368;
  t483 = t477 + t479;
  t489 = t438*t377;
  t496 = t284*t387;
  t498 = t489 + t496;
  t499 = t432*t498;
  t500 = t464*t390;
  t501 = t499 + t500;
  t508 = Power(t507,2);
  t514 = t397*t429;
  t515 = t431*t473;
  t516 = t514 + t515;
  t517 = Power(t516,2);
  t518 = t508 + t517;
  t522 = 1/t518;
  t532 = -1.*t432;
  t533 = 0. + t532;
  t537 = -1.*t463*t461;
  t540 = -1.*t533*t468;
  t541 = t537 + t540;
  t544 = Power(t541,2);
  t546 = t544 + t508 + t517;
  t548 = 1/t546;
  t484 = -1.*t431*t483;
  t502 = t397*t501;
  t504 = t484 + t502;
  t525 = t397*t483;
  t526 = t431*t501;
  t527 = t525 + t526;
  t572 = t62*t71*t245;
  t564 = t154*t62*t71;
  t566 = t149*t85;
  t567 = -1.*t62*t149*t86;
  t568 = t564 + t566 + t567;
  t578 = t236*t85;
  t579 = -1.*t251*t62*t86;
  t581 = 0. + t572 + t578 + t579;
  t583 = t201*t581;
  t584 = t251*t85;
  t585 = -1.*t236*t62*t86;
  t588 = 0. + t572 + t584 + t585;
  t590 = -1.*t259*t588;
  t591 = t583 + t590;
  t571 = t121*t568;
  t592 = t194*t591;
  t593 = t571 + t592;
  t595 = t194*t568;
  t596 = -1.*t121*t591;
  t597 = t595 + t596;
  t292 = t194*t189;
  t294 = -1.*t121*t270;
  t299 = t292 + t294;
  t289 = t285*t281;
  t304 = t291*t299;
  t308 = t289 + t304;
  t594 = t438*t593;
  t598 = t284*t597;
  t599 = t594 + t598;
  t600 = t463*t599;
  t602 = t285*t593;
  t603 = t291*t597;
  t606 = t602 + t603;
  t607 = t533*t606;
  t608 = t600 + t607;
  t621 = 0. + t352 + t353 + t354;
  t623 = t201*t621;
  t624 = 0. + t362 + t353 + t367;
  t625 = -1.*t259*t624;
  t626 = t623 + t625;
  t627 = t194*t626;
  t628 = t349 + t627;
  t631 = -1.*t121*t626;
  t632 = t381 + t631;
  t667 = -1.*t71*t245*t85;
  t655 = t62*t149;
  t657 = -1.*t154*t71*t85;
  t660 = t149*t85*t86;
  t662 = t655 + t657 + t660;
  t665 = t121*t662;
  t666 = t236*t62;
  t668 = t251*t85*t86;
  t669 = t666 + t667 + t668;
  t671 = t201*t669;
  t672 = t251*t62;
  t673 = t236*t85*t86;
  t675 = t672 + t667 + t673;
  t677 = -1.*t259*t675;
  t681 = t671 + t677;
  t682 = t194*t681;
  t683 = t665 + t682;
  t736 = t62*t71*t245*t72;
  t713 = t154*t62*t71*t72;
  t716 = t149*t72*t85;
  t720 = -1.*t62*t149*t72*t86;
  t721 = t713 + t716 + t720;
  t732 = t121*t721;
  t740 = t236*t72*t85;
  t746 = -1.*t251*t62*t72*t86;
  t751 = t736 + t740 + t746;
  t753 = t201*t751;
  t756 = t251*t72*t85;
  t758 = -1.*t236*t62*t72*t86;
  t760 = t736 + t756 + t758;
  t766 = -1.*t259*t760;
  t767 = t753 + t766;
  t769 = t194*t767;
  t771 = t732 + t769;
  t813 = -1.*t56*t62*t71*t245;
  t799 = -1.*t154*t56*t62*t71;
  t802 = -1.*t56*t149*t85;
  t806 = t56*t62*t149*t86;
  t811 = t799 + t802 + t806;
  t812 = t121*t811;
  t816 = -1.*t236*t56*t85;
  t817 = t251*t56*t62*t86;
  t818 = t813 + t816 + t817;
  t823 = t201*t818;
  t825 = -1.*t251*t56*t85;
  t827 = t236*t56*t62*t86;
  t830 = t813 + t825 + t827;
  t833 = -1.*t259*t830;
  t834 = t823 + t833;
  t835 = t194*t834;
  t836 = t812 + t835;
  t841 = t194*t811;
  t842 = -1.*t121*t834;
  t843 = t841 + t842;
  t840 = t285*t836;
  t846 = t291*t843;
  t847 = t840 + t846;
  t858 = t259*t818;
  t865 = t201*t830;
  t868 = t858 + t865;
  t870 = t438*t836;
  t871 = t284*t843;
  t872 = t870 + t871;
  t876 = t432*t872;
  t877 = t464*t847;
  t879 = t876 + t877;
  t430 = -1.*t397*t429;
  t474 = -1.*t431*t473;
  t475 = t430 + t474;
  t550 = t463*t461;
  t551 = t533*t468;
  t554 = t550 + t551;
  t883 = -1.*t431*t868;
  t887 = t397*t879;
  t888 = t883 + t887;
  t869 = t397*t868;
  t880 = t431*t879;
  t881 = t869 + t880;
  t555 = 1/Sqrt(t518);
  t536 = Sqrt(t518);
  t778 = t194*t721;
  t779 = -1.*t121*t767;
  t781 = t778 + t779;
  t777 = t285*t771;
  t782 = t291*t781;
  t786 = t777 + t782;
  t619 = Power(t608,2);
  t630 = t438*t628;
  t633 = t284*t632;
  t634 = t630 + t633;
  t635 = t463*t634;
  t638 = t285*t628;
  t639 = t291*t632;
  t640 = t638 + t639;
  t641 = t533*t640;
  t642 = t635 + t641;
  t644 = Power(t642,2);
  t645 = t619 + t644;
  t646 = 1/t645;
  t695 = t194*t662;
  t698 = -1.*t121*t681;
  t701 = t695 + t698;
  t691 = t285*t683;
  t704 = t291*t701;
  t705 = t691 + t704;
  t941 = -1.*t62*t245*t86;
  t935 = -1.*t62*t71*t149;
  t936 = -1.*t154*t62*t86;
  t937 = t935 + t936;
  t938 = t121*t937;
  t939 = -1.*t251*t62*t71;
  t942 = t939 + t941;
  t943 = t201*t942;
  t944 = -1.*t236*t62*t71;
  t948 = t944 + t941;
  t949 = -1.*t259*t948;
  t951 = t943 + t949;
  t952 = t194*t951;
  t954 = t938 + t952;
  t965 = -1.*t71*t72*t85;
  t966 = -1.*t56*t86;
  t969 = t965 + t966;
  t976 = t245*t326;
  t971 = t149*t969;
  t972 = t154*t326;
  t973 = t971 + t972;
  t974 = t121*t973;
  t975 = t251*t969;
  t979 = t975 + t976;
  t980 = t201*t979;
  t986 = t236*t969;
  t987 = t986 + t976;
  t989 = -1.*t259*t987;
  t990 = t980 + t989;
  t991 = t194*t990;
  t992 = t974 + t991;
  t1010 = t245*t409;
  t1005 = t149*t175;
  t1006 = t154*t409;
  t1007 = t1005 + t1006;
  t1008 = t121*t1007;
  t1009 = t251*t175;
  t1011 = t1009 + t1010;
  t1012 = t201*t1011;
  t1013 = t236*t175;
  t1017 = t1013 + t1010;
  t1018 = -1.*t259*t1017;
  t1019 = t1012 + t1018;
  t1020 = t194*t1019;
  t1021 = t1008 + t1020;
  t1025 = t194*t1007;
  t1026 = -1.*t121*t1019;
  t1027 = t1025 + t1026;
  t1024 = t285*t1021;
  t1028 = t291*t1027;
  t1029 = t1024 + t1028;
  t1033 = t259*t1011;
  t1034 = t201*t1017;
  t1035 = t1033 + t1034;
  t1038 = t438*t1021;
  t1041 = t284*t1027;
  t1043 = t1038 + t1041;
  t1044 = t432*t1043;
  t1045 = t464*t1029;
  t1047 = t1044 + t1045;
  t1036 = -1.*t431*t1035;
  t1049 = t397*t1047;
  t1050 = t1036 + t1049;
  t1054 = t397*t1035;
  t1056 = t431*t1047;
  t1057 = t1054 + t1056;
  t957 = t194*t937;
  t958 = -1.*t121*t951;
  t960 = t957 + t958;
  t956 = t285*t954;
  t961 = t291*t960;
  t962 = t956 + t961;
  t929 = -1.*t463*t634;
  t930 = -1.*t533*t640;
  t931 = t929 + t930;
  t996 = t194*t973;
  t997 = -1.*t121*t990;
  t998 = t996 + t997;
  t995 = t285*t992;
  t999 = t291*t998;
  t1000 = t995 + t999;
  t1098 = 0.707107*t154*t62*t71;
  t1099 = -0.5000003094490001*t125*t85;
  t1100 = 0.5000003094490001*t62*t125*t86;
  t1101 = t1098 + t1099 + t1100;
  t1091 = -1.*t62*t71*t125;
  t1092 = -0.707107*t154*t85;
  t1093 = 0.707107*t154*t62*t86;
  t1094 = t1091 + t1092 + t1093;
  t1097 = t121*t1094;
  t1102 = t201*t1101;
  t1103 = -1.*t259*t1101;
  t1104 = t1102 + t1103;
  t1105 = t194*t1104;
  t1106 = t1097 + t1105;
  t1125 = 0.5000003094490001*t62*t125*t72;
  t1126 = 0.707107*t154*t341;
  t1127 = -0.5000003094490001*t125*t326;
  t1128 = t1125 + t1126 + t1127;
  t1119 = 0.707107*t154*t62*t72;
  t1120 = -1.*t125*t341;
  t1121 = -0.707107*t154*t326;
  t1122 = t1119 + t1120 + t1121;
  t1123 = t121*t1122;
  t1129 = t201*t1128;
  t1131 = -1.*t259*t1128;
  t1132 = t1129 + t1131;
  t1133 = t194*t1132;
  t1134 = t1123 + t1133;
  t1153 = -0.5000003094490001*t56*t62*t125;
  t1155 = 0.707107*t154*t402;
  t1156 = -0.5000003094490001*t125*t409;
  t1157 = t1153 + t1155 + t1156;
  t1147 = -0.707107*t154*t56*t62;
  t1148 = -1.*t125*t402;
  t1149 = -0.707107*t154*t409;
  t1150 = t1147 + t1148 + t1149;
  t1151 = t121*t1150;
  t1160 = t201*t1157;
  t1162 = -1.*t259*t1157;
  t1163 = t1160 + t1162;
  t1164 = t194*t1163;
  t1165 = t1151 + t1164;
  t1169 = t194*t1150;
  t1170 = -1.*t121*t1163;
  t1173 = t1169 + t1170;
  t1168 = t285*t1165;
  t1174 = t291*t1173;
  t1175 = t1168 + t1174;
  t1179 = t259*t1157;
  t1180 = t1160 + t1179;
  t1183 = t438*t1165;
  t1184 = t284*t1173;
  t1185 = t1183 + t1184;
  t1186 = t432*t1185;
  t1187 = t464*t1175;
  t1188 = t1186 + t1187;
  t1181 = -1.*t431*t1180;
  t1189 = t397*t1188;
  t1190 = t1181 + t1189;
  t1192 = t397*t1180;
  t1193 = t431*t1188;
  t1194 = t1192 + t1193;
  t1109 = t194*t1094;
  t1111 = -1.*t121*t1104;
  t1112 = t1109 + t1111;
  t1108 = t285*t1106;
  t1113 = t291*t1112;
  t1114 = t1108 + t1113;
  t1137 = t194*t1122;
  t1139 = -1.*t121*t1132;
  t1140 = t1137 + t1139;
  t1136 = t285*t1134;
  t1141 = t291*t1140;
  t1142 = t1136 + t1141;
  t1228 = -1.*t259*t581;
  t1229 = -1.*t201*t588;
  t1230 = t1228 + t1229;
  t1239 = -1.*t259*t621;
  t1241 = -1.*t201*t624;
  t1243 = t1239 + t1241;
  t1253 = -1.*t259*t412;
  t1254 = -1.*t201*t426;
  t1255 = t1253 + t1254;
  t1257 = t194*t285*t1255;
  t1258 = -1.*t121*t291*t1255;
  t1259 = t1257 + t1258;
  t1265 = -1.*t284*t121*t1255;
  t1266 = t194*t438*t1255;
  t1268 = t1265 + t1266;
  t1270 = t432*t1268;
  t1271 = t464*t1259;
  t1272 = t1270 + t1271;
  t1279 = -1.*t431*t450;
  t1280 = t397*t1272;
  t1281 = t1279 + t1280;
  t1262 = t397*t450;
  t1275 = t431*t1272;
  t1277 = t1262 + t1275;
  t1245 = t194*t285*t1243;
  t1248 = -1.*t121*t291*t1243;
  t1250 = t1245 + t1248;
  t1232 = t194*t285*t1230;
  t1233 = -1.*t121*t291*t1230;
  t1234 = t1232 + t1233;
  t1356 = -1.*t121*t443;
  t1357 = -1.*t194*t450;
  t1358 = t1356 + t1357;
  t1359 = t291*t1358;
  t1362 = t285*t459;
  t1363 = t1359 + t1362;
  t1366 = t464*t1363;
  t1368 = t284*t1358;
  t1369 = t438*t459;
  t1370 = t1368 + t1369;
  t1371 = t432*t1370;
  t1372 = t1366 + t1371;
  t1346 = -1.*t121*t348;
  t1347 = -1.*t194*t626;
  t1349 = t1346 + t1347;
  t1350 = t291*t1349;
  t1351 = t285*t632;
  t1352 = t1350 + t1351;
  t1333 = -1.*t121*t568;
  t1336 = -1.*t194*t591;
  t1337 = t1333 + t1336;
  t1338 = t291*t1337;
  t1340 = t285*t597;
  t1341 = t1338 + t1340;
  t1417 = -1.*t291*t454;
  t1418 = t1417 + t460;
  t1420 = t464*t1418;
  t1421 = -1.*t284*t454;
  t1422 = -1.*t291*t459;
  t1424 = t1421 + t1422;
  t1427 = t432*t1424;
  t1428 = t1420 + t1427;
  t1414 = -1.*t291*t628;
  t1415 = t1414 + t633;
  t1410 = -1.*t291*t593;
  t1411 = t1410 + t598;
  t1489 = -1.*t432*t468;
  t1491 = t550 + t1489;
  p_output1[0]=1.;
  p_output1[1]=0;
  p_output1[2]=0;
  p_output1[3]=0;
  p_output1[4]=0;
  p_output1[5]=0;
  p_output1[6]=0;
  p_output1[7]=1.;
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=1.;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0.05*t114 - 0.1*t281 - 0.1029*t308 + 0.085*t56*t62;
  p_output1[20]=0.05*t326 - 0.1*t377 - 0.1029*t390 + 0.085*t62*t72;
  p_output1[21]=t475*t504*t522 + t507*t522*t527;
  p_output1[22]=(-1.*t463*t498 - 1.*t390*t533)*t536*t548 + 0.5*(2.*t504*t507 + 2.*t516*t527)*t548*t554*t555;
  p_output1[23]=((t284*t299 + t281*t438)*t463 + t308*t533)*t608*t646;
  p_output1[24]=-0.085*t62 - 0.1*t683 - 0.1029*t705 + 0.05*t85*t86;
  p_output1[25]=-0.1*t771 - 0.1029*t786 - 0.085*t72*t85 - 0.05*t62*t72*t86;
  p_output1[26]=-0.1*t836 - 0.1029*t847 + 0.085*t56*t85 + 0.05*t56*t62*t86;
  p_output1[27]=t507*t522*t881 + t475*t522*t888;
  p_output1[28]=t536*t548*(-1.*t533*t847 - 1.*t463*t872) + 0.5*t548*t554*t555*(2.*t516*t881 + 2.*t507*t888);
  p_output1[29]=t608*t646*(t463*(t438*t771 + t284*t781) + t533*t786) + t646*(t463*(t438*t683 + t284*t701) + t533*t705)*t931;
  p_output1[30]=-0.05*t62*t71 - 0.1*t954 - 0.1029*t962;
  p_output1[31]=-0.1029*t1000 + 0.05*t969 - 0.1*t992;
  p_output1[32]=-0.1*t1021 - 0.1029*t1029 + 0.05*t175;
  p_output1[33]=t1050*t475*t522 + t1057*t507*t522;
  p_output1[34]=(-1.*t1043*t463 - 1.*t1029*t533)*t536*t548 + 0.5*(2.*t1050*t507 + 2.*t1057*t516)*t548*t554*t555;
  p_output1[35]=t646*t931*(t463*(t438*t954 + t284*t960) + t533*t962) + t608*t646*(t1000*t533 + t463*(t438*t992 + t284*t998));
  p_output1[36]=0;
  p_output1[37]=0;
  p_output1[38]=0;
  p_output1[39]=0;
  p_output1[40]=0;
  p_output1[41]=0;
  p_output1[42]=0;
  p_output1[43]=0;
  p_output1[44]=0;
  p_output1[45]=0;
  p_output1[46]=0;
  p_output1[47]=0;
  p_output1[48]=0;
  p_output1[49]=0;
  p_output1[50]=0;
  p_output1[51]=0;
  p_output1[52]=0;
  p_output1[53]=0;
  p_output1[54]=0;
  p_output1[55]=0;
  p_output1[56]=0;
  p_output1[57]=0;
  p_output1[58]=0;
  p_output1[59]=0;
  p_output1[60]=0;
  p_output1[61]=0;
  p_output1[62]=0;
  p_output1[63]=0;
  p_output1[64]=0;
  p_output1[65]=0;
  p_output1[66]=0;
  p_output1[67]=0;
  p_output1[68]=0;
  p_output1[69]=0;
  p_output1[70]=0;
  p_output1[71]=0;
  p_output1[72]=0;
  p_output1[73]=0;
  p_output1[74]=0;
  p_output1[75]=0;
  p_output1[76]=0;
  p_output1[77]=0;
  p_output1[78]=0;
  p_output1[79]=0;
  p_output1[80]=0;
  p_output1[81]=0;
  p_output1[82]=0;
  p_output1[83]=0;
  p_output1[84]=0;
  p_output1[85]=0;
  p_output1[86]=0;
  p_output1[87]=0;
  p_output1[88]=0;
  p_output1[89]=0;
  p_output1[90]=0;
  p_output1[91]=0;
  p_output1[92]=0;
  p_output1[93]=0;
  p_output1[94]=0;
  p_output1[95]=0;
  p_output1[96]=0;
  p_output1[97]=0;
  p_output1[98]=0;
  p_output1[99]=0;
  p_output1[100]=0;
  p_output1[101]=0;
  p_output1[102]=0;
  p_output1[103]=0;
  p_output1[104]=0;
  p_output1[105]=0;
  p_output1[106]=0;
  p_output1[107]=0;
  p_output1[108]=-0.1*t1106 - 0.1029*t1114;
  p_output1[109]=-0.1*t1134 - 0.1029*t1142;
  p_output1[110]=-0.1*t1165 - 0.1029*t1175;
  p_output1[111]=t1190*t475*t522 + t1194*t507*t522;
  p_output1[112]=(-1.*t1185*t463 - 1.*t1175*t533)*t536*t548 + 0.5*(2.*t1190*t507 + 2.*t1194*t516)*t548*t554*t555;
  p_output1[113]=((t1140*t284 + t1134*t438)*t463 + t1142*t533)*t608*t646 + ((t1112*t284 + t1106*t438)*t463 + t1114*t533)*t646*t931;
  p_output1[114]=-0.1029*t1234 - 0.1*t1230*t194;
  p_output1[115]=-0.1029*t1250 - 0.1*t1243*t194;
  p_output1[116]=-0.1029*t1259 - 0.1*t1255*t194;
  p_output1[117]=t1281*t475*t522 + t1277*t507*t522;
  p_output1[118]=(-1.*t1268*t463 - 1.*t1259*t533)*t536*t548 + 0.5*(2.*t1281*t507 + 2.*t1277*t516)*t548*t554*t555;
  p_output1[119]=((-1.*t121*t1243*t284 + t1243*t194*t438)*t463 + t1250*t533)*t608*t646 + ((-1.*t121*t1230*t284 + t1230*t194*t438)*t463 + t1234*t533)*t646*t931;
  p_output1[120]=-0.1029*t1341 - 0.1*t597;
  p_output1[121]=-0.1029*t1352 - 0.1*t632;
  p_output1[122]=-0.1029*t1363 - 0.1*t459;
  p_output1[123]=t1372*t397*t475*t522 + t1372*t431*t507*t522;
  p_output1[124]=(-1.*t1370*t463 - 1.*t1363*t533)*t536*t548 + 0.5*(2.*t1372*t397*t507 + 2.*t1372*t431*t516)*t548*t554*t555;
  p_output1[125]=t608*(t1352*t533 + t463*(t1349*t284 + t438*t632))*t646 + (t1341*t533 + t463*(t1337*t284 + t438*t597))*t646*t931;
  p_output1[126]=-0.1029*t1411;
  p_output1[127]=-0.1029*t1415;
  p_output1[128]=-0.1029*t1418;
  p_output1[129]=t1428*t397*t475*t522 + t1428*t431*t507*t522;
  p_output1[130]=(-1.*t1424*t463 - 1.*t1418*t533)*t536*t548 + 0.5*(2.*t1428*t397*t507 + 2.*t1428*t431*t516)*t548*t554*t555;
  p_output1[131]=t608*(t1415*t533 + t463*(-1.*t284*t628 - 1.*t291*t632))*t646 + (t1411*t533 + t463*(-1.*t284*t593 - 1.*t291*t597))*t646*t931;
  p_output1[132]=0;
  p_output1[133]=0;
  p_output1[134]=0;
  p_output1[135]=t1491*t397*t475*t522 + t1491*t431*t507*t522;
  p_output1[136]=(t462 + t463*t468)*t536*t548 + 0.5*(2.*t1491*t397*t507 + 2.*t1491*t431*t516)*t548*t554*t555;
  p_output1[137]=t608*(-1.*t432*t634 - 1.*t463*t640)*t646 + (-1.*t432*t599 - 1.*t463*t606)*t646*t931;
  p_output1[138]=0;
  p_output1[139]=0;
  p_output1[140]=0;
  p_output1[141]=Power(t475,2)*t522 + t508*t522;
  p_output1[142]=0.5*(2.*t475*t507 + 2.*t507*t516)*t548*t554*t555;
  p_output1[143]=0;
  p_output1[144]=0;
  p_output1[145]=0;
  p_output1[146]=0;
  p_output1[147]=0;
  p_output1[148]=0;
  p_output1[149]=0;
  p_output1[150]=0;
  p_output1[151]=0;
  p_output1[152]=0;
  p_output1[153]=0;
  p_output1[154]=0;
  p_output1[155]=0;
  p_output1[156]=0;
  p_output1[157]=0;
  p_output1[158]=0;
  p_output1[159]=0;
  p_output1[160]=0;
  p_output1[161]=0;
  p_output1[162]=0;
  p_output1[163]=0;
  p_output1[164]=0;
  p_output1[165]=0;
  p_output1[166]=0;
  p_output1[167]=0;
  p_output1[168]=0;
  p_output1[169]=0;
  p_output1[170]=0;
  p_output1[171]=0;
  p_output1[172]=0;
  p_output1[173]=0;
  p_output1[174]=0;
  p_output1[175]=0;
  p_output1[176]=0;
  p_output1[177]=0;
  p_output1[178]=0;
  p_output1[179]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 6, (mwSize) 30, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "j_Lfoot_func.hh"

namespace SymFunction
{

void j_Lfoot_func_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
