/*
 * Automatically Generated from Mathematica.
 * Tue 10 Jul 2018 11:12:59 GMT-04:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t69;
  double t22;
  double t46;
  double t78;
  double t85;
  double t93;
  double t127;
  double t160;
  double t162;
  double t190;
  double t195;
  double t83;
  double t111;
  double t122;
  double t129;
  double t130;
  double t142;
  double t258;
  double t221;
  double t224;
  double t228;
  double t354;
  double t365;
  double t366;
  double t367;
  double t369;
  double t371;
  double t330;
  double t331;
  double t337;
  double t427;
  double t430;
  double t376;
  double t384;
  double t213;
  double t217;
  double t218;
  double t468;
  double t469;
  double t473;
  double t475;
  double t476;
  double t245;
  double t247;
  double t255;
  double t257;
  double t262;
  double t263;
  double t288;
  double t290;
  double t294;
  double t301;
  double t303;
  double t316;
  double t697;
  double t698;
  double t699;
  double t481;
  double t482;
  double t483;
  double t546;
  double t550;
  double t555;
  double t558;
  double t562;
  double t564;
  double t612;
  double t613;
  double t617;
  double t626;
  double t629;
  double t632;
  double t1907;
  double t1939;
  double t1947;
  double t1996;
  double t1998;
  double t2043;
  double t2245;
  double t2258;
  double t2279;
  double t2530;
  double t2531;
  double t2538;
  double t2547;
  double t2549;
  double t2554;
  double t2572;
  double t2577;
  double t2578;
  double t2539;
  double t2557;
  double t2562;
  double t2672;
  double t2673;
  double t2676;
  double t2688;
  double t2777;
  double t2784;
  double t2797;
  double t2816;
  double t2820;
  double t2823;
  double t3116;
  double t3120;
  double t3140;
  double t3215;
  double t3217;
  double t3224;
  double t3225;
  double t1973;
  double t3288;
  double t3290;
  double t3303;
  double t3312;
  double t3572;
  double t3594;
  double t2127;
  double t3304;
  double t3639;
  double t3677;
  double t3746;
  double t3760;
  double t3709;
  double t2330;
  double t4096;
  double t4107;
  double t2340;
  double t2449;
  double t2493;
  double t4011;
  double t4065;
  double t4079;
  double t2341;
  double t4726;
  double t4737;
  double t4759;
  double t4767;
  double t4774;
  double t4775;
  double t4761;
  double t4828;
  double t4855;
  double t2619;
  double t2621;
  double t4978;
  double t4984;
  double t4989;
  double t2595;
  double t2607;
  double t5285;
  double t5297;
  double t5311;
  double t3071;
  double t3086;
  double t5317;
  double t5332;
  double t5333;
  double t3167;
  double t3177;
  double t5233;
  double t5235;
  double t5236;
  double t2839;
  double t2866;
  double t5238;
  double t5249;
  double t5259;
  double t2928;
  double t2995;
  double t738;
  double t823;
  double t977;
  double t1548;
  double t1586;
  double t1621;
  double t722;
  double t723;
  double t735;
  double t339;
  double t378;
  double t381;
  double t413;
  double t414;
  double t417;
  double t418;
  double t428;
  double t431;
  double t433;
  double t435;
  double t438;
  double t440;
  double t442;
  double t445;
  double t447;
  double t448;
  double t455;
  double t456;
  double t705;
  double t706;
  double t709;
  double t711;
  double t714;
  double t719;
  double t737;
  double t1088;
  double t1225;
  double t1388;
  double t1418;
  double t1422;
  double t1624;
  double t1625;
  double t1678;
  double t1700;
  double t1723;
  double t1754;
  double t485;
  double t487;
  double t489;
  double t492;
  double t494;
  double t508;
  double t557;
  double t577;
  double t599;
  double t517;
  double t518;
  double t519;
  double t618;
  double t637;
  double t638;
  double t606;
  double t607;
  double t609;
  double t2049;
  double t2101;
  double t2125;
  double t2285;
  double t2320;
  double t2331;
  double t2334;
  double t2344;
  double t2357;
  double t2484;
  double t2499;
  double t2501;
  double t2523;
  double t2527;
  double t2727;
  double t2741;
  double t2757;
  double t2568;
  double t2583;
  double t2600;
  double t2608;
  double t2610;
  double t2614;
  double t2635;
  double t2655;
  double t2661;
  double t2690;
  double t2704;
  double t2813;
  double t2826;
  double t2830;
  double t2838;
  double t2848;
  double t2868;
  double t2885;
  double t2887;
  double t2909;
  double t2993;
  double t3006;
  double t3007;
  double t3018;
  double t3058;
  double t3064;
  double t3087;
  double t3094;
  double t3103;
  double t3162;
  double t3164;
  double t3169;
  double t3181;
  double t3189;
  double t3230;
  double t3234;
  double t3236;
  double t3237;
  double t3244;
  double t3679;
  double t3681;
  double t3711;
  double t3712;
  double t3865;
  double t3872;
  double t3887;
  double t4094;
  double t4110;
  double t4117;
  double t4118;
  double t4140;
  double t4141;
  double t4154;
  double t4163;
  double t4265;
  double t4301;
  double t4317;
  double t4329;
  double t4351;
  double t4375;
  double t4384;
  double t4385;
  double t4394;
  double t4397;
  double t4398;
  double t4399;
  double t4400;
  double t4402;
  double t4412;
  double t4424;
  double t4428;
  double t4429;
  double t4455;
  double t4463;
  double t4466;
  double t4495;
  double t4508;
  double t4524;
  double t4526;
  double t4527;
  double t4597;
  double t4598;
  double t4599;
  double t4856;
  double t5013;
  double t5016;
  double t5027;
  double t5032;
  double t5033;
  double t5035;
  double t5045;
  double t5074;
  double t5077;
  double t5080;
  double t5109;
  double t5114;
  double t5116;
  double t5120;
  double t5181;
  double t5197;
  double t5206;
  double t5237;
  double t5260;
  double t5275;
  double t5312;
  double t5352;
  double t5433;
  double t5437;
  double t5438;
  double t5440;
  double t5442;
  double t5444;
  double t5445;
  double t5447;
  double t5454;
  double t5455;
  double t5459;
  double t5480;
  double t5507;
  double t5518;
  double t5529;
  double t5530;
  double t5544;
  double t5551;
  double t5561;
  double t5577;
  double t5604;
  double t5610;
  double t5628;
  double t5629;
  double t5645;
  double t5649;
  double t5650;
  double t5662;
  double t5700;
  double t5712;
  double t5714;
  double t479;
  double t480;
  double t490;
  double t516;
  double t520;
  double t602;
  double t611;
  double t647;
  double t662;
  double t6309;
  double t6312;
  double t6313;
  double t6314;
  double t6318;
  double t6320;
  double t6321;
  double t6322;
  double t6323;
  double t3912;
  double t4119;
  double t4327;
  double t4465;
  double t4724;
  double t5017;
  double t5225;
  double t5278;
  double t5436;
  double t5531;
  double t5729;
  double t5763;
  double t6544;
  double t6559;
  double t6570;
  double t6579;
  double t6580;
  double t6634;
  double t6636;
  double t6638;
  double t6645;
  double t6647;
  double t6686;
  double t6717;
  double t7429;
  double t7449;
  double t7493;
  double t7494;
  double t7498;
  double t7522;
  double t7548;
  double t7562;
  double t7572;
  double t7578;
  double t7582;
  double t7607;
  double t7946;
  double t7953;
  double t7971;
  double t8010;
  double t8015;
  double t8030;
  double t8039;
  double t8040;
  double t8061;
  double t8080;
  double t7630;
  double t7631;
  double t7638;
  double t8440;
  double t8444;
  double t8448;
  double t8468;
  double t8479;
  double t8481;
  double t8482;
  double t8483;
  double t8485;
  double t8486;
  double t8489;
  double t8490;
  double t8518;
  double t8548;
  double t8575;
  double t8576;
  double t8742;
  double t8744;
  double t8751;
  double t8756;
  double t8761;
  double t8762;
  double t8763;
  double t8764;
  double t8771;
  double t8773;
  double t1821;
  double t1887;
  double t2528;
  double t2724;
  double t2775;
  double t2834;
  double t3063;
  double t3235;
  double t3246;
  double t3247;
  double t6327;
  double t6328;
  double t6333;
  double t6334;
  double t6361;
  double t6373;
  double t6380;
  double t6394;
  double t6395;
  double t6417;
  double t7062;
  double t7077;
  double t7079;
  double t7081;
  double t7084;
  double t7229;
  double t7270;
  double t7346;
  double t7350;
  double t7354;
  double t8462;
  double t8463;
  double t8464;
  double t8803;
  double t8808;
  double t8812;
  double t8270;
  double t8281;
  double t8284;
  double t8392;
  double t8394;
  double t8401;
  double t8406;
  double t8411;
  double t8415;
  double t8449;
  double t8466;
  double t8467;
  double t8851;
  double t8852;
  double t8854;
  double t8855;
  double t8858;
  double t8862;
  double t8863;
  double t8873;
  double t8877;
  double t8897;
  double t8903;
  double t8908;
  double t8962;
  double t8477;
  double t8478;
  double t8618;
  double t8629;
  double t8644;
  double t8646;
  double t434;
  double t461;
  double t463;
  double t6969;
  double t6974;
  double t6986;
  double t5894;
  double t5935;
  double t6051;
  double t8791;
  double t8795;
  double t8120;
  double t9068;
  double t9072;
  double t9073;
  double t9093;
  double t9104;
  double t9121;
  double t9129;
  double t9141;
  double t9145;
  double t8186;
  double t328;
  double t419;
  double t422;
  double t6943;
  double t6944;
  double t6961;
  double t5831;
  double t5850;
  double t5892;
  double t8740;
  double t9074;
  double t9127;
  double t9147;
  double t8777;
  double t7923;
  double t9194;
  double t9195;
  double t9196;
  double t8081;
  double t123;
  double t143;
  double t145;
  double t5777;
  double t5779;
  double t5788;
  double t6913;
  double t6930;
  double t6934;
  double t8819;
  double t8820;
  double t8829;
  double t7705;
  double t7787;
  double t7809;
  t69 = Cos(var1[7]);
  t22 = Cos(var1[4]);
  t46 = Cos(var1[6]);
  t78 = Sin(var1[5]);
  t85 = Cos(var1[5]);
  t93 = Sin(var1[6]);
  t127 = Sin(var1[7]);
  t160 = Power(t22,2);
  t162 = -1.*t46*t78;
  t190 = -1.*t85*t93;
  t195 = t162 + t190;
  t83 = -1.*t46*t69*t78;
  t111 = -1.*t85*t69*t93;
  t122 = t83 + t111;
  t129 = -1.*t46*t78*t127;
  t130 = -1.*t85*t93*t127;
  t142 = t129 + t130;
  t258 = Sin(var1[4]);
  t221 = -1.*t85*t46;
  t224 = t78*t93;
  t228 = t221 + t224;
  t354 = -1.*t69;
  t365 = 1. + t354;
  t366 = 0.1265*t365;
  t367 = 0.17908*t69;
  t369 = 0.00112*t127;
  t371 = t366 + t367 + t369;
  t330 = -0.00112*t69;
  t331 = 0.05258*t127;
  t337 = t330 + t331;
  t427 = Power(t46,2);
  t430 = Power(t93,2);
  t376 = -1.*t371*t127;
  t384 = -1.*t69*t371;
  t213 = t85*t46;
  t217 = -1.*t78*t93;
  t218 = t213 + t217;
  t468 = Cos(var1[3]);
  t469 = -1.*t468*t258*t195;
  t473 = Sin(var1[3]);
  t475 = t473*t218;
  t476 = t469 + t475;
  t245 = t85*t46*t69;
  t247 = -1.*t69*t78*t93;
  t255 = t245 + t247;
  t257 = t22*t255;
  t262 = -1.*t258*t127;
  t263 = t257 + t262;
  t288 = t69*t258;
  t290 = t85*t46*t127;
  t294 = -1.*t78*t93*t127;
  t301 = t290 + t294;
  t303 = t22*t301;
  t316 = t288 + t303;
  t697 = t473*t258*t195;
  t698 = t468*t218;
  t699 = t697 + t698;
  t481 = t46*t78;
  t482 = t85*t93;
  t483 = t481 + t482;
  t546 = t46*t69*t78;
  t550 = t85*t69*t93;
  t555 = t546 + t550;
  t558 = -1.*t258*t255;
  t562 = -1.*t22*t127;
  t564 = t558 + t562;
  t612 = t46*t78*t127;
  t613 = t85*t93*t127;
  t617 = t612 + t613;
  t626 = t22*t69;
  t629 = -1.*t258*t301;
  t632 = t626 + t629;
  t1907 = -1.e-5*t46*t78;
  t1939 = -1.e-5*t85*t93;
  t1947 = t1907 + t1939;
  t1996 = -1.e-5*t85*t46;
  t1998 = 1.e-5*t78*t93;
  t2043 = t1996 + t1998;
  t2245 = 1.e-5*t46*t78;
  t2258 = 1.e-5*t85*t93;
  t2279 = t2245 + t2258;
  t2530 = t46*t78*t337;
  t2531 = t85*t93*t337;
  t2538 = t2530 + t2531;
  t2547 = t85*t46*t337;
  t2549 = -1.*t78*t93*t337;
  t2554 = t2547 + t2549;
  t2572 = -1.*t46*t78*t337;
  t2577 = -1.*t85*t93*t337;
  t2578 = t2572 + t2577;
  t2539 = t218*t2538;
  t2557 = t195*t2554;
  t2562 = t2539 + t2557;
  t2672 = -1.*t555*t2538;
  t2673 = -1.*t255*t2554;
  t2676 = t371*t127;
  t2688 = t2672 + t2673 + t2676;
  t2777 = t555*t2538;
  t2784 = t255*t2554;
  t2797 = t2777 + t2784 + t376;
  t2816 = -1.*t2538*t617;
  t2820 = -1.*t2554*t301;
  t2823 = t384 + t2816 + t2820;
  t3116 = -1.*t218*t2538;
  t3120 = -1.*t195*t2554;
  t3140 = t3116 + t3120;
  t3215 = t69*t371;
  t3217 = t2538*t617;
  t3224 = t2554*t301;
  t3225 = t3215 + t3217 + t3224;
  t1973 = t1947*t218;
  t3288 = 0.09908*t258;
  t3290 = t22*t2043;
  t3303 = t3288 + t3290;
  t3312 = 0.09908*t22;
  t3572 = -1.*t258*t2043;
  t3594 = t3312 + t3572;
  t2127 = -1.*t1947*t218;
  t3304 = -1.*t258*t3303;
  t3639 = -1.*t22*t3594;
  t3677 = t3304 + t3639;
  t3746 = t22*t195*t3303;
  t3760 = -1.*t258*t195*t3594;
  t3709 = Power(t258,2);
  t2330 = -1.*t483*t2043;
  t4096 = -1.*t22*t195*t3303;
  t4107 = t258*t195*t3594;
  t2340 = -1.*t1947*t483;
  t2449 = t195*t1947;
  t2493 = t218*t2043;
  t4011 = t258*t3303;
  t4065 = t22*t3594;
  t4079 = t4011 + t4065;
  t2341 = -1.*t218*t2043;
  t4726 = -1.*t258*t2554;
  t4737 = t22*t371;
  t4759 = t4726 + t4737;
  t4767 = t22*t2554;
  t4774 = t258*t371;
  t4775 = t4767 + t4774;
  t4761 = -1.*t258*t195*t4759;
  t4828 = t22*t195*t4775;
  t4855 = t4761 + t4828 + t2539;
  t2619 = t195*t2538;
  t2621 = t218*t2554;
  t4978 = -1.*t4759*t564;
  t4984 = -1.*t4775*t263;
  t4989 = t2672 + t4978 + t4984;
  t2595 = -1.*t255*t2538;
  t2607 = -1.*t555*t2554;
  t5285 = t258*t195*t4759;
  t5297 = -1.*t22*t195*t4775;
  t5311 = t5285 + t5297 + t3116;
  t3071 = -1.*t195*t2538;
  t3086 = -1.*t218*t2554;
  t5317 = t4775*t316;
  t5332 = t4759*t632;
  t5333 = t3217 + t5317 + t5332;
  t3167 = t2554*t617;
  t3177 = t2538*t301;
  t5233 = t4759*t564;
  t5235 = t4775*t263;
  t5236 = t2777 + t5233 + t5235;
  t2839 = t255*t2538;
  t2866 = t555*t2554;
  t5238 = -1.*t4775*t316;
  t5249 = -1.*t4759*t632;
  t5259 = t2816 + t5238 + t5249;
  t2928 = -1.*t2554*t617;
  t2995 = -1.*t2538*t301;
  t738 = t473*t258*t122;
  t823 = t468*t255;
  t977 = t738 + t823;
  t1548 = t473*t258*t142;
  t1586 = t468*t301;
  t1621 = t1548 + t1586;
  t722 = t468*t195;
  t723 = t473*t258*t228;
  t735 = t722 + t723;
  t339 = t69*t337;
  t378 = t339 + t376;
  t381 = t69*t378;
  t413 = -1.*t337*t127;
  t414 = t384 + t413;
  t417 = -1.*t127*t414;
  t418 = t381 + t417;
  t428 = -1.e-5*t427;
  t431 = -1.e-5*t430;
  t433 = t428 + t431;
  t435 = t427*t69*t337;
  t438 = t69*t430*t337;
  t440 = t435 + t438 + t376;
  t442 = t69*t440;
  t445 = -1.*t427*t337*t127;
  t447 = -1.*t430*t337*t127;
  t448 = t384 + t445 + t447;
  t455 = -1.*t127*t448;
  t456 = t442 + t455;
  t705 = 0.07842*t22*t218*t699;
  t706 = 0.68375*t22*t228*t699;
  t709 = t468*t483;
  t711 = t473*t258*t218;
  t714 = t709 + t711;
  t719 = 0.07842*t22*t195*t714;
  t737 = 0.68375*t22*t195*t735;
  t1088 = 0.60533*t977*t263;
  t1225 = t468*t555;
  t1388 = -1.*t473*t564;
  t1418 = t1225 + t1388;
  t1422 = 0.60533*t22*t122*t1418;
  t1624 = 0.60533*t1621*t316;
  t1625 = t468*t617;
  t1678 = -1.*t473*t632;
  t1700 = t1625 + t1678;
  t1723 = 0.60533*t22*t142*t1700;
  t1754 = t705 + t706 + t719 + t737 + t1088 + t1422 + t1624 + t1723;
  t485 = t473*t483;
  t487 = -1.*t468*t258*t218;
  t489 = t485 + t487;
  t492 = t473*t195;
  t494 = -1.*t468*t258*t228;
  t508 = t492 + t494;
  t557 = t473*t555;
  t577 = t468*t564;
  t599 = t557 + t577;
  t517 = -1.*t468*t258*t122;
  t518 = t473*t255;
  t519 = t517 + t518;
  t618 = t473*t617;
  t637 = t468*t632;
  t638 = t618 + t637;
  t606 = -1.*t468*t258*t142;
  t607 = t473*t301;
  t609 = t606 + t607;
  t2049 = t195*t2043;
  t2101 = t1973 + t2049;
  t2125 = t218*t2101;
  t2285 = -1.*t2279*t218;
  t2320 = -1.*t195*t2043;
  t2331 = t2127 + t2285 + t2320 + t2330;
  t2334 = t218*t2331;
  t2344 = t2340 + t2341;
  t2357 = t195*t2344;
  t2484 = t195*t2279;
  t2499 = t2043*t228;
  t2501 = t2449 + t2484 + t2493 + t2499;
  t2523 = t483*t2501;
  t2527 = t2125 + t2334 + t2357 + t2523;
  t2727 = t555*t2562;
  t2741 = t218*t2688;
  t2757 = t2727 + t2741;
  t2568 = t255*t2562;
  t2583 = -1.*t255*t2578;
  t2600 = -1.*t122*t2554;
  t2608 = t2583 + t2595 + t2600 + t2607;
  t2610 = t218*t2608;
  t2614 = t195*t2578;
  t2635 = t228*t2554;
  t2655 = t2614 + t2619 + t2621 + t2635;
  t2661 = t555*t2655;
  t2690 = t195*t2688;
  t2704 = t2568 + t2610 + t2661 + t2690;
  t2813 = t617*t2797;
  t2826 = t555*t2823;
  t2830 = t2813 + t2826;
  t2838 = t255*t2578;
  t2848 = t122*t2554;
  t2868 = t2838 + t2839 + t2848 + t2866;
  t2885 = t2868*t617;
  t2887 = t301*t2797;
  t2909 = -1.*t2554*t142;
  t2993 = -1.*t2578*t301;
  t3006 = t2909 + t2928 + t2993 + t2995;
  t3007 = t555*t3006;
  t3018 = t255*t2823;
  t3058 = t2885 + t2887 + t3007 + t3018;
  t3064 = -1.*t195*t2578;
  t3087 = -1.*t228*t2554;
  t3094 = t3064 + t3071 + t3086 + t3087;
  t3103 = t3094*t617;
  t3162 = t3140*t301;
  t3164 = t2554*t142;
  t3169 = t2578*t301;
  t3181 = t3164 + t3167 + t3169 + t3177;
  t3189 = t218*t3181;
  t3230 = t195*t3225;
  t3234 = t3103 + t3162 + t3189 + t3230;
  t3236 = t3140*t617;
  t3237 = t218*t3225;
  t3244 = t3236 + t3237;
  t3679 = t22*t195*t3677;
  t3681 = t160*t2279*t218;
  t3711 = t3709*t2279*t218;
  t3712 = t483*t2043;
  t3865 = t1973 + t3681 + t3711 + t3712 + t3746 + t3760;
  t3872 = t258*t3865;
  t3887 = t3679 + t3872;
  t4094 = t22*t195*t4079;
  t4110 = t2127 + t4096 + t4107;
  t4117 = t258*t4110;
  t4118 = t4094 + t4117;
  t4140 = t22*t218*t3677;
  t4141 = t1947*t483;
  t4154 = t22*t218*t3303;
  t4163 = -1.*t258*t218*t3594;
  t4265 = t4141 + t4154 + t4163;
  t4301 = t258*t4265;
  t4317 = t4140 + t4301;
  t4329 = t1973 + t3746 + t3760;
  t4351 = t22*t195*t4329;
  t4375 = -1.*t160*t2279*t218;
  t4384 = -1.*t3709*t2279*t218;
  t4385 = t2127 + t4375 + t4384 + t2330 + t4096 + t4107;
  t4394 = t22*t195*t4385;
  t4397 = -1.*t22*t218*t3303;
  t4398 = t258*t218*t3594;
  t4399 = t2340 + t4397 + t4398;
  t4400 = t22*t228*t4399;
  t4402 = t160*t195*t2279;
  t4412 = t3709*t195*t2279;
  t4424 = t22*t228*t3303;
  t4428 = -1.*t258*t228*t3594;
  t4429 = t2449 + t4402 + t4412 + t2493 + t4424 + t4428;
  t4455 = t22*t218*t4429;
  t4463 = t4351 + t4394 + t4400 + t4455;
  t4466 = t22*t228*t4079;
  t4495 = -1.*t195*t1947;
  t4508 = -1.*t160*t195*t2279;
  t4524 = -1.*t3709*t195*t2279;
  t4526 = -1.*t22*t228*t3303;
  t4527 = t258*t228*t3594;
  t4597 = t4495 + t4508 + t4524 + t2341 + t4526 + t4527;
  t4598 = t258*t4597;
  t4599 = t4466 + t4598;
  t4856 = t4855*t263;
  t5013 = t22*t195*t4989;
  t5016 = t4856 + t5013;
  t5027 = t22*t122*t4855;
  t5032 = -1.*t258*t228*t4759;
  t5033 = t22*t228*t4775;
  t5035 = t160*t195*t2578;
  t5045 = t3709*t195*t2578;
  t5074 = t5032 + t5033 + t5035 + t5045 + t2619 + t2621;
  t5077 = t5074*t263;
  t5080 = t22*t228*t4989;
  t5109 = t258*t122*t4759;
  t5114 = -1.*t22*t122*t4775;
  t5116 = t258*t2578*t564;
  t5120 = -1.*t22*t2578*t263;
  t5181 = t5109 + t5114 + t2595 + t2607 + t5116 + t5120;
  t5197 = t22*t195*t5181;
  t5206 = t5027 + t5077 + t5080 + t5197;
  t5237 = t5236*t316;
  t5260 = t263*t5259;
  t5275 = t5237 + t5260;
  t5312 = t5311*t316;
  t5352 = t22*t195*t5333;
  t5433 = t5312 + t5352;
  t5437 = t22*t5311*t142;
  t5438 = t258*t228*t4759;
  t5440 = -1.*t22*t228*t4775;
  t5442 = -1.*t160*t195*t2578;
  t5444 = -1.*t3709*t195*t2578;
  t5445 = t5438 + t5440 + t5442 + t5444 + t3071 + t3086;
  t5447 = t5445*t316;
  t5454 = t22*t228*t5333;
  t5455 = -1.*t258*t4759*t142;
  t5459 = t22*t4775*t142;
  t5480 = t22*t2578*t316;
  t5507 = -1.*t258*t2578*t632;
  t5518 = t5455 + t5459 + t3167 + t3177 + t5480 + t5507;
  t5529 = t22*t195*t5518;
  t5530 = t5437 + t5447 + t5454 + t5529;
  t5544 = t22*t142*t5236;
  t5551 = -1.*t258*t122*t4759;
  t5561 = t22*t122*t4775;
  t5577 = -1.*t258*t2578*t564;
  t5604 = t22*t2578*t263;
  t5610 = t5551 + t5561 + t2839 + t2866 + t5577 + t5604;
  t5628 = t5610*t316;
  t5629 = t22*t122*t5259;
  t5645 = t258*t4759*t142;
  t5649 = -1.*t22*t4775*t142;
  t5650 = -1.*t22*t2578*t316;
  t5662 = t258*t2578*t632;
  t5700 = t5645 + t5649 + t2928 + t2995 + t5650 + t5662;
  t5712 = t263*t5700;
  t5714 = t5544 + t5628 + t5629 + t5712;
  t479 = 0.07842*t22*t218*t476;
  t480 = 0.68375*t22*t228*t476;
  t490 = 0.07842*t22*t195*t489;
  t516 = 0.68375*t22*t195*t508;
  t520 = 0.60533*t519*t263;
  t602 = 0.60533*t22*t122*t599;
  t611 = 0.60533*t316*t609;
  t647 = 0.60533*t22*t142*t638;
  t662 = t479 + t480 + t490 + t516 + t520 + t602 + t611 + t647;
  t6309 = 0.07842*t699*t489;
  t6312 = 0.07842*t476*t714;
  t6313 = 0.68375*t699*t508;
  t6314 = 0.68375*t476*t735;
  t6318 = 0.60533*t977*t599;
  t6320 = 0.60533*t519*t1418;
  t6321 = 0.60533*t1621*t638;
  t6322 = 0.60533*t609*t1700;
  t6323 = t6309 + t6312 + t6313 + t6314 + t6318 + t6320 + t6321 + t6322;
  t3912 = 0.07842*t22*t195*t3887;
  t4119 = 0.07842*t22*t195*t4118;
  t4327 = 0.07842*t22*t228*t4317;
  t4465 = 0.07842*t258*t4463;
  t4724 = 0.07842*t22*t218*t4599;
  t5017 = 0.60533*t22*t142*t5016;
  t5225 = 0.60533*t316*t5206;
  t5278 = 0.60533*t22*t228*t5275;
  t5436 = 0.60533*t22*t122*t5433;
  t5531 = 0.60533*t263*t5530;
  t5729 = 0.60533*t22*t195*t5714;
  t5763 = t3912 + t4119 + t4327 + t4465 + t4724 + t5017 + t5225 + t5278 + t5436 + t5531 + t5729;
  t6544 = 0.07842*t699*t3887;
  t6559 = 0.07842*t699*t4118;
  t6570 = 0.07842*t735*t4317;
  t6579 = -0.07842*t22*t473*t4463;
  t6580 = 0.07842*t714*t4599;
  t6634 = 0.60533*t1621*t5016;
  t6636 = 0.60533*t5206*t1700;
  t6638 = 0.60533*t735*t5275;
  t6645 = 0.60533*t977*t5433;
  t6647 = 0.60533*t1418*t5530;
  t6686 = 0.60533*t699*t5714;
  t6717 = t6544 + t6559 + t6570 + t6579 + t6580 + t6634 + t6636 + t6638 + t6645 + t6647 + t6686;
  t7429 = 0.07842*t476*t3887;
  t7449 = 0.07842*t476*t4118;
  t7493 = 0.07842*t508*t4317;
  t7494 = 0.07842*t468*t22*t4463;
  t7498 = 0.07842*t489*t4599;
  t7522 = 0.60533*t609*t5016;
  t7548 = 0.60533*t5206*t638;
  t7562 = 0.60533*t508*t5275;
  t7572 = 0.60533*t519*t5433;
  t7578 = 0.60533*t599*t5530;
  t7582 = 0.60533*t476*t5714;
  t7607 = t7429 + t7449 + t7493 + t7494 + t7498 + t7522 + t7548 + t7562 + t7572 + t7578 + t7582;
  t7946 = 0.000958*t22*t122;
  t7953 = 9.e-6*t22*t228;
  t7971 = 5.e-6*t22*t142;
  t8010 = t7946 + t7953 + t7971;
  t8015 = -1.*t127*t8010;
  t8030 = 5.e-6*t22*t122;
  t8039 = -0.00003*t22*t228;
  t8040 = 0.000985*t22*t142;
  t8061 = t8030 + t8039 + t8040;
  t8080 = t69*t8061;
  t7630 = 9.e-6*t22*t122;
  t7631 = 0.000817*t22*t228;
  t7638 = -0.00003*t22*t142;
  t8440 = t22*t218*t4329;
  t8444 = t22*t195*t4399;
  t8448 = t8440 + t8444;
  t8468 = t7630 + t7631 + t7638;
  t8479 = 0.000817*t22*t195;
  t8481 = 9.e-6*t263;
  t8482 = -0.00003*t316;
  t8483 = t8479 + t8481 + t8482;
  t8485 = 9.e-6*t22*t195;
  t8486 = 0.000958*t263;
  t8489 = 5.e-6*t316;
  t8490 = t8485 + t8486 + t8489;
  t8518 = -0.00003*t22*t195;
  t8548 = 5.e-6*t263;
  t8575 = 0.000985*t316;
  t8576 = t8518 + t8548 + t8575;
  t8742 = 9.e-6*t195;
  t8744 = 0.000958*t255;
  t8751 = 5.e-6*t301;
  t8756 = t8742 + t8744 + t8751;
  t8761 = -1.*t127*t8756;
  t8762 = -0.00003*t195;
  t8763 = 5.e-6*t255;
  t8764 = 0.000985*t301;
  t8771 = t8762 + t8763 + t8764;
  t8773 = t69*t8771;
  t1821 = 0.0077698536*t22*t195*t218;
  t1887 = -0.0077698536*t22*t483*t228;
  t2528 = 0.07842*t258*t2527;
  t2724 = 0.60533*t316*t2704;
  t2775 = 0.60533*t22*t142*t2757;
  t2834 = 0.60533*t22*t228*t2830;
  t3063 = 0.60533*t22*t195*t3058;
  t3235 = 0.60533*t263*t3234;
  t3246 = 0.60533*t22*t122*t3244;
  t3247 = t1821 + t1887 + t2528 + t2724 + t2775 + t2834 + t3063 + t3235 + t3246;
  t6327 = 0.0077698536*t195*t714;
  t6328 = -0.0077698536*t483*t735;
  t6333 = -0.07842*t22*t473*t2527;
  t6334 = 0.60533*t1621*t2757;
  t6361 = 0.60533*t2704*t1700;
  t6373 = 0.60533*t735*t2830;
  t6380 = 0.60533*t699*t3058;
  t6394 = 0.60533*t1418*t3234;
  t6395 = 0.60533*t977*t3244;
  t6417 = t6327 + t6328 + t6333 + t6334 + t6361 + t6373 + t6380 + t6394 + t6395;
  t7062 = 0.0077698536*t195*t489;
  t7077 = -0.0077698536*t483*t508;
  t7079 = 0.07842*t468*t22*t2527;
  t7081 = 0.60533*t609*t2757;
  t7084 = 0.60533*t2704*t638;
  t7229 = 0.60533*t508*t2830;
  t7270 = 0.60533*t476*t3058;
  t7346 = 0.60533*t599*t3234;
  t7350 = 0.60533*t519*t3244;
  t7354 = t7062 + t7077 + t7079 + t7081 + t7084 + t7229 + t7270 + t7346 + t7350;
  t8462 = t483*t2101;
  t8463 = t218*t2344;
  t8464 = t8462 + t8463;
  t8803 = 0.000817*t195;
  t8808 = 9.e-6*t255;
  t8812 = -0.00003*t301;
  t8270 = Power(t195,2);
  t8281 = 0.000017*t22*t8270;
  t8284 = 0.000016*t22*t195*t483;
  t8392 = Power(t218,2);
  t8394 = 0.000016*t22*t8392;
  t8401 = 0.000017*t22*t218*t228;
  t8406 = -0.0077698536*t483*t3887;
  t8411 = 0.0077698536*t195*t4118;
  t8415 = -0.0077698536*t218*t4317;
  t8449 = 0.07842*t2527*t8448;
  t8466 = 0.07842*t8464*t4463;
  t8467 = 0.0077698536*t218*t4599;
  t8851 = 9.e-6*t555;
  t8852 = 0.000817*t218;
  t8854 = -0.00003*t617;
  t8855 = t8851 + t8852 + t8854;
  t8858 = 0.000958*t555;
  t8862 = 9.e-6*t218;
  t8863 = 5.e-6*t617;
  t8873 = t8858 + t8862 + t8863;
  t8877 = 5.e-6*t555;
  t8897 = -0.00003*t218;
  t8903 = 0.000985*t617;
  t8908 = t8877 + t8897 + t8903;
  t8962 = t8803 + t8808 + t8812;
  t8477 = 0.60533*t2704*t5016;
  t8478 = 0.60533*t2757*t5206;
  t8618 = 0.60533*t3058*t5275;
  t8629 = 0.60533*t3234*t5433;
  t8644 = 0.60533*t3244*t5530;
  t8646 = 0.60533*t2830*t5714;
  t434 = 0.07842*t22*t228*t433;
  t461 = 0.60533*t22*t228*t456;
  t463 = t434 + t461;
  t6969 = 0.07842*t433*t508;
  t6974 = 0.60533*t508*t456;
  t6986 = t6969 + t6974;
  t5894 = 0.07842*t433*t735;
  t5935 = 0.60533*t735*t456;
  t6051 = t5894 + t5935;
  t8791 = -0.0077698536*t218*t433;
  t8795 = 0.60533*t456*t3058;
  t8120 = 0.07842*t433*t3887;
  t9068 = 5.e-6*t69;
  t9072 = -0.000958*t127;
  t9073 = t9068 + t9072;
  t9093 = -0.00003*t69;
  t9104 = -9.e-6*t127;
  t9121 = t9093 + t9104;
  t9129 = 0.000985*t69;
  t9141 = -5.e-6*t127;
  t9145 = t9129 + t9141;
  t8186 = 0.60533*t456*t5714;
  t328 = -7.842e-7*t22*t228;
  t419 = 0.60533*t22*t228*t418;
  t422 = t328 + t419;
  t6943 = -7.842e-7*t508;
  t6944 = 0.60533*t508*t418;
  t6961 = t6943 + t6944;
  t5831 = -7.842e-7*t735;
  t5850 = 0.60533*t735*t418;
  t5892 = t5831 + t5850;
  t8740 = 7.7698536e-8*t218;
  t9074 = t255*t9073;
  t9127 = t195*t9121;
  t9147 = t9145*t301;
  t8777 = 0.60533*t418*t3058;
  t7923 = -7.842e-7*t3887;
  t9194 = t22*t122*t9073;
  t9195 = t22*t228*t9121;
  t9196 = t22*t9145*t142;
  t8081 = 0.60533*t418*t5714;
  t123 = 0.0318282514*t22*t122;
  t143 = 0.0006779696*t22*t142;
  t145 = t123 + t143;
  t5777 = 0.0318282514*t977;
  t5779 = 0.0006779696*t1621;
  t5788 = t5777 + t5779;
  t6913 = 0.0318282514*t519;
  t6930 = 0.0006779696*t609;
  t6934 = t6913 + t6930;
  t8819 = 0.0006779696*t2704;
  t8820 = 0.0318282514*t3234;
  t8829 = t8803 + t8808 + t8812 + t8819 + t8820;
  t7705 = 0.0006779696*t5206;
  t7787 = 0.0318282514*t5530;
  t7809 = t7630 + t7631 + t7638 + t7705 + t7787;
  p_output1[0]=var2[6]*(-0.5*(0.15684*t160*t195*t218 + 1.3675*t160*t195*t228 + 1.21066*t122*t22*t263 + 1.21066*t142*t22*t316)*var2[0] - 0.5*t1754*var2[1] - 0.5*t662*var2[2] - 0.5*t5763*var2[3] - 0.5*t3247*var2[4] - 0.5*t463*var2[5] - 0.5*t422*var2[6] - 0.5*t145*var2[7]);
  p_output1[1]=var2[6]*(-0.5*t1754*var2[0] - 0.5*(1.21066*t1621*t1700 + 0.15684*t699*t714 + 1.3675*t699*t735 + 1.21066*t1418*t977)*var2[1] - 0.5*t6323*var2[2] - 0.5*t6717*var2[3] - 0.5*t6417*var2[4] - 0.5*t6051*var2[5] - 0.5*t5892*var2[6] - 0.5*t5788*var2[7]);
  p_output1[2]=var2[6]*(-0.5*t662*var2[0] - 0.5*t6323*var2[1] - 0.5*(0.15684*t476*t489 + 1.3675*t476*t508 + 1.21066*t519*t599 + 1.21066*t609*t638)*var2[2] - 0.5*t7607*var2[3] - 0.5*t7354*var2[4] - 0.5*t6986*var2[5] - 0.5*t6961*var2[6] - 0.5*t6934*var2[7]);
  p_output1[3]=var2[6]*(-0.5*t5763*var2[0] - 0.5*t6717*var2[1] - 0.5*t7607*var2[2] - 0.5*(0.000032*t160*t195*t218 + 0.000034*t160*t195*t228 + 0.15684*t3887*t4317 + 0.15684*t4118*t4599 + 1.21066*t5016*t5206 + 1.21066*t5433*t5530 + 1.21066*t5275*t5714 + t263*t8010 + t316*t8061 + 0.15684*t4463*t8448 + t195*t22*t8468 + t22*t228*t8483 + t122*t22*t8490 + t142*t22*t8576)*var2[3] - 0.5*(t555*t8010 + t617*t8061 + t8281 + t8284 + t8394 + t8401 + t8406 + t8411 + t8415 + t8449 + t8466 + t8467 + t218*t8468 + t8477 + t8478 + t195*t8483 + t255*t8490 + t301*t8576 + t8618 + t8629 + t8644 + t8646)*var2[4] - 0.5*(t8015 + t8080 + t8120 + t8186)*var2[5] - 0.5*(t7923 + t8015 + t8080 + t8081)*var2[6] - 0.5*t7809*var2[7]);
  p_output1[4]=var2[6]*(-0.5*t3247*var2[0] - 0.5*t6417*var2[1] - 0.5*t7354*var2[2] - 0.5*(t8281 + t8284 + t8394 + t8401 + t8406 + t8411 + t8415 + t8449 + t8466 + t8467 + t8477 + t8478 + t8618 + t8629 + t8644 + t8646 + t263*t8756 + t316*t8771 + t22*t228*t8855 + t122*t22*t8873 + t142*t22*t8908 + t195*t22*t8962)*var2[3] - 0.5*(0.001573674189376*t195*t218 + 1.21066*t2704*t2757 + 1.21066*t2830*t3058 + 1.21066*t3234*t3244 + 0.001571674189376*t218*t483 + 0.15684*t2527*t8464 + t555*t8756 + t617*t8771 + t195*t8855 + t255*t8873 + t301*t8908 + t218*t8962)*var2[4] - 0.5*(t8761 + t8773 + t8791 + t8795)*var2[5] - 0.5*(t8740 + t8761 + t8773 + t8777)*var2[6] - 0.5*t8829*var2[7]);
  p_output1[5]=(-0.5*t463*var2[0] - 0.5*t6051*var2[1] - 0.5*t6986*var2[2] - 0.5*(t8120 + t8186 + t9194 + t9195 + t9196)*var2[3] - 0.5*(t8791 + t8795 + t9074 + t9127 + t9147)*var2[4])*var2[6];
  p_output1[6]=(-0.5*t422*var2[0] - 0.5*t5892*var2[1] - 0.5*t6961*var2[2] - 0.5*(t7923 + t8081 + t9194 + t9195 + t9196)*var2[3] - 0.5*(t8740 + t8777 + t9074 + t9127 + t9147)*var2[4])*var2[6];
  p_output1[7]=(-0.5*t145*var2[0] - 0.5*t5788*var2[1] - 0.5*t6934*var2[2] - 0.5*t7809*var2[3] - 0.5*t8829*var2[4])*var2[6];
  p_output1[8]=0;
  p_output1[9]=0;
  p_output1[10]=0;
  p_output1[11]=0;
  p_output1[12]=0;
  p_output1[13]=0;
  p_output1[14]=0;
  p_output1[15]=0;
  p_output1[16]=0;
  p_output1[17]=0;
  p_output1[18]=0;
  p_output1[19]=0;
  p_output1[20]=0;
  p_output1[21]=0;
  p_output1[22]=0;
  p_output1[23]=0;
  p_output1[24]=0;
  p_output1[25]=0;
  p_output1[26]=0;
  p_output1[27]=0;
  p_output1[28]=0;
  p_output1[29]=0;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 30 && ncols == 1) && 
      !(mrows == 1 && ncols == 30))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 30, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "Ce2_vec7_NaoH25V50.hh"

namespace SymFunction
{

void Ce2_vec7_NaoH25V50_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
